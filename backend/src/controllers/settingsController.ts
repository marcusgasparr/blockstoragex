import { Request, Response } from 'express';
import { query, getOne, insert } from '../lib/db';

export class SettingsController {
  // GET /api/settings/current-disk - Obter disco atual
  static async getCurrentDisk(req: Request, res: Response) {
    try {
      console.log('üîç Buscando disco atual do sistema...');

      const setting = await getOne(
        'SELECT setting_value FROM settingsSystem WHERE setting_key = ?',
        ['current_disk']
      );

      if (!setting) {
        // Se n√£o existir, criar com valor padr√£o
        console.log('‚ö†Ô∏è Configura√ß√£o de disco n√£o encontrada, criando padr√£o...');
        
        const defaultDisk = process.platform === 'win32' ? 'C:\\' : '/';
        
        await query(
          'INSERT INTO settingsSystem (setting_key, setting_value, description) VALUES (?, ?, ?)',
          ['current_disk', defaultDisk, 'Caminho do disco atualmente em uso']
        );

        return res.json({
          success: true,
          data: {
            current_disk: defaultDisk
          },
          message: 'Configura√ß√£o padr√£o criada'
        });
      }

      console.log('‚úÖ Disco atual encontrado:', setting.setting_value);

      res.json({
        success: true,
        data: {
          current_disk: setting.setting_value
        }
      });

    } catch (error) {
      console.error('‚ùå Erro ao buscar disco atual:', error);
      res.status(500).json({
        success: false,
        message: 'Erro ao buscar configura√ß√£o do disco',
        error: error instanceof Error ? error.message : 'Erro desconhecido'
      });
    }
  }

  // PUT /api/settings/current-disk - Atualizar disco atual
  static async updateCurrentDisk(req: Request, res: Response) {
    try {
      const { diskPath } = req.body;

      if (!diskPath) {
        return res.status(400).json({
          success: false,
          message: 'Caminho do disco √© obrigat√≥rio'
        });
      }

      console.log('üíæ Atualizando disco atual para:', diskPath);

      // Verificar se j√° existe a configura√ß√£o
      const existingSetting = await getOne(
        'SELECT id FROM settingsSystem WHERE setting_key = ?',
        ['current_disk']
      );

      if (existingSetting) {
        // Atualizar configura√ß√£o existente
        await query(
          'UPDATE settingsSystem SET setting_value = ?, updated_at = CURRENT_TIMESTAMP WHERE setting_key = ?',
          [diskPath, 'current_disk']
        );
      } else {
        // Criar nova configura√ß√£o
        await query(
          'INSERT INTO settingsSystem (setting_key, setting_value, description) VALUES (?, ?, ?)',
          ['current_disk', diskPath, 'Caminho do disco atualmente em uso']
        );
      }

      console.log('‚úÖ Disco atualizado com sucesso');

      res.json({
        success: true,
        data: {
          current_disk: diskPath
        },
        message: 'Disco atualizado com sucesso'
      });

    } catch (error) {
      console.error('‚ùå Erro ao atualizar disco:', error);
      res.status(500).json({
        success: false,
        message: 'Erro ao atualizar configura√ß√£o do disco',
        error: error instanceof Error ? error.message : 'Erro desconhecido'
      });
    }
  }

  // GET /api/settings/all - Obter todas as configura√ß√µes
  static async getAllSettings(req: Request, res: Response) {
    try {
      console.log('üîç Buscando todas as configura√ß√µes...');

      const settings = await query(
        'SELECT setting_key, setting_value, description, updated_at FROM settingsSystem ORDER BY setting_key'
      ) as any[];

      // Converter array para objeto
      const settingsObject: Record<string, any> = {};
      settings.forEach(setting => {
        settingsObject[setting.setting_key] = {
          value: setting.setting_value,
          description: setting.description,
          updated_at: setting.updated_at
        };
      });

      console.log('‚úÖ Configura√ß√µes encontradas:', Object.keys(settingsObject).length);

      res.json({
        success: true,
        data: settingsObject,
        count: settings.length
      });

    } catch (error) {
      console.error('‚ùå Erro ao buscar configura√ß√µes:', error);
      res.status(500).json({
        success: false,
        message: 'Erro ao buscar configura√ß√µes',
        error: error instanceof Error ? error.message : 'Erro desconhecido'
      });
    }
  }

  // PUT /api/settings/bulk - Atualizar m√∫ltiplas configura√ß√µes
  static async updateSettings(req: Request, res: Response) {
    try {
      const { settings } = req.body;

      if (!settings || typeof settings !== 'object') {
        return res.status(400).json({
          success: false,
          message: 'Configura√ß√µes devem ser um objeto'
        });
      }

      console.log('üíæ Atualizando configura√ß√µes em lote...');

      const promises = Object.entries(settings).map(async ([key, value]) => {
        const existingSetting = await getOne(
          'SELECT id FROM settingsSystem WHERE setting_key = ?',
          [key]
        );

        if (existingSetting) {
          return query(
            'UPDATE settingsSystem SET setting_value = ?, updated_at = CURRENT_TIMESTAMP WHERE setting_key = ?',
            [value, key]
          );
        } else {
          return query(
            'INSERT INTO settingsSystem (setting_key, setting_value, description) VALUES (?, ?, ?)',
            [key, value, `Configura√ß√£o para ${key}`]
          );
        }
      });

      await Promise.all(promises);

      console.log('‚úÖ Configura√ß√µes atualizadas com sucesso');

      res.json({
        success: true,
        message: 'Configura√ß√µes atualizadas com sucesso',
        count: Object.keys(settings).length
      });

    } catch (error) {
      console.error('‚ùå Erro ao atualizar configura√ß√µes:', error);
      res.status(500).json({
        success: false,
        message: 'Erro ao atualizar configura√ß√µes',
        error: error instanceof Error ? error.message : 'Erro desconhecido'
      });
    }
  }
}